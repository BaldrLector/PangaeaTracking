--Dimension parameters
local W,H = Dim("W",0), Dim("H",1)	--Image size
local N = 	Dim("N",2)				--Number of vertices

--Problem parameters
local f_x = Param("f_x",float,0)
local f_y = Param("f_y",float,1)
local u_x = Param("u_x",float,2)
local u_y = Param("u_y",float,3)

local w_photometricSqrt = 	Param("w_photometricSqrt", float, 4)	--Photometric cost weight
local w_tvSqrt = 			Param("w_tvSqrt", float, 5)				--TV regularisation weight
local w_arapSqrt = 			Param("w_arapSqrt", float, 6)			--ARAP regularisation weight
local w_tempShapeSqrt = 	Param("w_tempShapeSqrt", float, 7)		--Temporal shape regularisation weight

local Offset = 			Unknown("Offset", opt.float3,{N},8)			--vertex.xyz <- unknown
local Angle = 			Unknown("Angle", opt.float3,{N},9)			--vertex.xyz, rotation.xyz <- unknown

local RigidRot = 		Image("RigidRot", opt.float3,{1},10)		--rigid rotation rotation.xyz <- unknown
local RigidTrans = 		Image("RigidTrans", opt.float3,{1},11)	--rigid trnaslation trnaslation.xyz <- unknown
local Im = 				Array("Im", float, {W,H}, 12) 				--Image Intensity
local TemplateColors = 	Image("TemplateColors", float, {N},13)	--template shape: vertex.xyz
local TemplateShape = 	Image("TemplateShape", opt.float3, {N},14)	--template shape: vertex.xyz
local PrevOffset =		Image("PrevOffset", opt.float3,{N},15)		--previous vertices offset: vertex.xyz
local G = Graph("G", 16, "v0", {N}, 17, "v1", {N}, 18)				--Graph
local Visibility = 		Image("Visibility", float, {N}, 19)			--Visibility

UsePreconditioner(true)

function Intensity(v)
    local x = v(0)
    local y = v(1)
    local z = v(2)
    local i = (f_x * x - u_x * z) / z
    local j = (f_y * y - u_y * z) / z
    return Im(i,j)
end

function newVertex(v, dv, R, t)
	return Rotate3D(R, v + dv) + t
end

--Photometric Error Data term
local photometricCost= Intensity( newVertex(TemplateShape(0,0), Offset(0,0), RigidRot, RigidTrans) ) - TemplateColors(0,0)
Energy( Select(eq(Visibility(0), 0), 0, w_photometricSqrt*photometricCost) )

--TV regularization
local TVCost = Offset(G.v0) - Offset(G.v1)
Energy(w_tvSqrt*TVCost)

--ARAP regularization
local template_diff = TemplateShape(G.v0) - TemplateShape(G.v1)
local ARAPCost = template_diff 
               - Rotate3D( Angle(G.v0), template_diff + (Offset(G.v0) - Offset(G.v1)) )
Energy(w_arapSqrt*ARAPCost)

--Temporal Shape regularisation
local TempShapeCost = Offset(0) - PrevOffset(0)
Energy(w_tempShapeSqrt*TempShapeCost)
